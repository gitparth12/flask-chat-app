{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww35800\viewh19660\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 const crypto = require('crypto');\
\
function encryptStringWithKey(key, plaintext) \{\
  const cipher = crypto.createCipher('aes-256-cbc', key);\
  let ciphertext = cipher.update(plaintext, 'utf8', 'hex');\
  ciphertext += cipher.final('hex');\
  const hmac = crypto.createHmac('sha256', key);\
  hmac.update(ciphertext);\
  const mac = hmac.digest('hex');\
  return `$\{ciphertext\}.$\{mac\}`;\
\}\
\
function decryptStringWithKey(key, message) \{\
  const [ciphertext, mac] = message.split('.');\
  const hmac = crypto.createHmac('sha256', key);\
  hmac.update(ciphertext);\
  const computedMac = hmac.digest('hex');\
  if (computedMac !== mac) \{\
    throw new Error(\'91Password authentication failed');\
  \}\
  const decipher = crypto.createDecipher('aes-256-cbc', key);\
  let plaintext = decipher.update(ciphertext, 'hex', 'utf8');\
  plaintext += decipher.final('utf8');\
  return plaintext;\
\}\
\
const key = 'my-secret-key';\
const plaintext = 'Hello, world!';\
const encryptedMessage = encryptStringWithKey(key, plaintext);\
console.log(`Encrypted message: $\{encryptedMessage\}`);\
const decryptedPlaintext = decryptStringWithKey(key, encryptedMessage);\
console.log(`Decrypted plaintext: $\{decryptedPlaintext\}`);\
}